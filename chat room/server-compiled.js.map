{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,UAAU,QAAQ,SAAR,EAAmB,OAAjC;AACA,IAAI,MAAM,SAAV;AACA,IAAI,GAAJ,CAAQ,QAAQ,MAAR,CAAe,SAAf,CAAR;AACA,IAAI,GAAJ,CAAQ,GAAR,EAAa,UAAS,GAAT,EAAc,GAAd,EAAkB;AAC3B,QAAI,QAAJ,CAAa,KAAK,OAAL,CAAa,YAAb,CAAb;AACH,CAFD;AAGA;AACA,IAAI,SAAS,QAAQ,MAAR,EAAgB,YAAhB,CAA6B,GAA7B,CAAb;AACA;AACA,IAAI,KAAK,QAAQ,WAAR,EAAqB,MAArB,CAAT;;AAEA;AACA;;;;;;;;;;;;;AAeI;AACJ,IAAI,UAAU,EAAd;AACA,GAAG,EAAH,CAAM,YAAN,EAAoB,UAAS,MAAT,EAAgB;AAChC;AACA,QAAI,QAAJ;AACA,QAAI,QAAJ;AACA,QAAI,WAAJ;AACA,WAAO,IAAP,CAAY,EAAC,UAAW,IAAZ,EAAkB,SAAU,cAA5B,EAAZ;AACA;AACA,WAAO,EAAP,CAAU,SAAV,EAAqB,UAAS,OAAT,EAAiB;AAClC;;;AAGA,YAAG,QAAH,EAAY;AAAE;AACV,gBAAI,MAAM,eAAV;AACA,gBAAI,SAAS,QAAQ,KAAR,CAAc,GAAd,CAAb;AACA,gBAAG,MAAH,EAAU;AAAC;AACP,oBAAI,SAAS,OAAO,CAAP,CAAb,CADM,CACiB;AACvB,oBAAI,UAAU,OAAO,CAAP,CAAd,CAFM,CAEmB;AACzB;AACA,wBAAQ,MAAR,EAAgB,IAAhB,CAAqB,EAAC,QAAD,EAAW,OAAX,EAArB;AACH,aALD,MAKO;AACH,wBAAQ,MAAR,CAAe,EAAC,QAAD,EAAW,SAAU,OAArB,EAAf,EAA8C,UAAS,GAAT,EAAc,GAAd,EAAkB;AAC5D;AACA,wBAAG,WAAH,EAAe;AACX,2BAAG,EAAH,CAAM,WAAN,EAAmB,IAAnB,CAAwB,SAAxB,EAAkC,GAAlC;AACH,qBAFD,MAEK;AACD,2BAAG,IAAH,CAAQ,SAAR,EAAkB,GAAlB;AACH;AACJ,iBAPD;AAQH;AAEJ,SAnBD,MAmBO;AAAC;AACJ;AACA,uBAAW,OAAX;AACA;AACA,oBAAQ,QAAR,IAAoB,MAApB;AACA;AACA,eAAG,IAAH,CAAQ,SAAR,EAAmB,EAAC,UAAW,IAAZ,EAAkB,SAAW,KAAI,QAAS,OAA1C,EAAnB;AACH;AACD;AACH,KAhCD;;AAkCA;AACA,WAAO,EAAP,CAAU,gBAAV,EAA4B,YAAU;AAClC,gBAAQ,IAAR,CAAa,EAAb,EAAiB,IAAjB,CAAsB,EAAC,UAAW,CAAC,CAAb,EAAtB,EAAuC,KAAvC,CAA6C,EAA7C,EAAiD,IAAjD,CAAsD,UAAS,GAAT,EAAc,IAAd,EAAmB;AACrE;AACA,iBAAK,OAAL;AACA,mBAAO,IAAP,CAAY,aAAZ,EAA2B,IAA3B;AACH,SAJD;AAKH,KAND;;AAQA;AACA,WAAO,EAAP,CAAU,MAAV,EAAkB,UAAS,QAAT,EAAkB;AAChC;AACA,YAAG,WAAH,EAAe;AACX,mBAAO,KAAP,CAAa,WAAb;AACH;AACD,sBAAY,QAAZ;AACA;AACA,eAAO,IAAP,CAAY,QAAZ;AACH,KARD;AASH,CA5DD;AA6DA,OAAO,MAAP,CAAc,IAAd","file":"server-compiled.js","sourcesContent":["var express = require(\"express\");\r\nvar path = require(\"path\");\r\nvar Message = require(\"./model\").Message;\r\nvar app = express();\r\napp.use(express.static(__dirname));\r\napp.get(\"/\", function(req, res){\r\n    res.sendFile(path.resolve(\"index.html\"));\r\n});\r\n//http服务器\r\nvar server = require(\"http\").createServer(app);\r\n//得到一个io实例\r\nvar io = require(\"socket.io\")(server);\r\n\r\n//监听客户端请求\r\n/**\r\n * 一、匿名聊天\r\n * 1）给表单增加提交事件，当提交表单的·时候是时候就取消默认事件，得到文件域的值，把它作为消息发送给服务器\r\n * 2）服务器收到消息后广播给所有的来客户端\r\n * 3）客户端监听服务器的消息，收到消息到取得消息内容并添加一个li到ul里\r\n * 二、私聊\r\n * 1.给用户名添加点击事件，点击用户名的时候在文本域中添加 @用户名，在输入你想私聊的内容\r\n * 2.把此内容发送给服务器，服务器提取你想私聊的用户和内容，然后把内容单独发给对应的用户。\r\n *三、数据持久化\r\n * 1.把消息发给服务器之后，服务器要负责存储到数据库中\r\n * 2.每当页面打开加载完之后都要获取历史数据，取最近20条即可。\r\n */\r\n\r\n\r\n\r\n    //声明一个全局变量，key是变量名对应的socket\r\nvar clients = {};\r\nio.on(\"connection\", function(socket){\r\n    //私有变量，每个客户都有自己的昵称或者用户名\r\n    var username;\r\n    var roomName;\r\n    var currentRoom;\r\n    socket.send({username : \"系统\", content : \"欢迎光临，请输入你的昵称\"});\r\n    //监听客户端的消息\r\n    socket.on(\"message\", function(message){\r\n        /*        socket.send(\"服务器：\" + message);\r\n         //给所有的客户端广播\r\n         io.emit(\"message\",\"消息\")*/\r\n        if(username){ //有值表示已经设置过昵称\r\n            var reg = /@([^ ]+) (.+)/;\r\n            var result = message.match(reg);\r\n            if(result){//如果符合正则的要求，那么就是私聊\r\n                var toUser = result[1];//想私聊的目标用户\r\n                var content = result[2]; //向私聊的内容\r\n                //向目标用户发消息\r\n                clients[toUser].send({username, content});\r\n            } else {\r\n                Message.create({username, content : message}, function(err, doc){\r\n                    //doc比对象多了两个_id createAt\r\n                    if(currentRoom){\r\n                        io.in(currentRoom).emit(\"message\",doc);\r\n                    }else{\r\n                        io.emit(\"message\",doc);\r\n                    }\r\n                });\r\n            }\r\n\r\n        } else {//没有值表示没有设置过昵称\r\n            //把客户端发过来的消息当做用户名\r\n            username = message;\r\n            //在同户名和socket对象之间建立关联\r\n            clients[username] = socket;\r\n            //现在服务器向客户端发送的是对象。\r\n            io.emit(\"message\", {username : \"系统\", content : `欢迎${username}加入聊天室`})\r\n        }\r\n        // io.emit(\"message\", message);\r\n    });\r\n\r\n    //响应客户端要求的返回历史数据的请求\r\n    socket.on(\"getAllMessages\", function(){\r\n        Message.find({}).sort({createAt : -1}).limit(20).exec(function(err, docs){\r\n            //先重新倒序，是\r\n            docs.reverse();\r\n            socket.emit(\"allMessages\", docs);\r\n        })\r\n    });\r\n\r\n    //加入房间  监听客户端发过来要求加入某个房间的消息\r\n    socket.on(\"join\", function(roomName){\r\n        //如果当前在某个房间内的话，则退出当前房间\r\n        if(currentRoom){\r\n            socket.leave(currentRoom);\r\n        }\r\n        currentRoom=roomName;\r\n        //让当前socket加入某个房间\r\n        socket.join(roomName)\r\n    })\r\n});\r\nserver.listen(8080);\r\n\r\n\r\n\r\n"]}